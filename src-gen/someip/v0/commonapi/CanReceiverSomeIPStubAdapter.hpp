/*
 * This file was generated by the CommonAPI Generators.
 * Used org.genivi.commonapi.someip 3.2.14.v202310241606.
 * Used org.franca.core 0.13.1.201807231814.
 *
 * This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
 * If a copy of the MPL was not distributed with this file, You can obtain one at
 * http://mozilla.org/MPL/2.0/.
 */
#ifndef V0_COMMONAPI_CAN_RECEIVER_SOMEIP_STUB_ADAPTER_HPP_
#define V0_COMMONAPI_CAN_RECEIVER_SOMEIP_STUB_ADAPTER_HPP_

#include <v0/commonapi/CanReceiverStub.hpp>
#include <v0/commonapi/CanReceiverSomeIPDeployment.hpp>

#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/SomeIP/AddressTranslator.hpp>
#include <CommonAPI/SomeIP/StubAdapterHelper.hpp>
#include <CommonAPI/SomeIP/StubAdapter.hpp>
#include <CommonAPI/SomeIP/Factory.hpp>
#include <CommonAPI/SomeIP/Types.hpp>
#include <CommonAPI/SomeIP/Constants.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace commonapi {

template <typename _Stub = ::v0::commonapi::CanReceiverStub, typename... _Stubs>
class CanReceiverSomeIPStubAdapterInternal
    : public virtual CanReceiverStubAdapter,
      public CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...>,
      public std::enable_shared_from_this< CanReceiverSomeIPStubAdapterInternal<_Stub, _Stubs...>>
{
public:
    typedef CommonAPI::SomeIP::StubAdapterHelper< _Stub, _Stubs...> CanReceiverSomeIPStubAdapterHelper;

    ~CanReceiverSomeIPStubAdapterInternal() {
        deactivateManagedInstances();
        CanReceiverSomeIPStubAdapterHelper::deinit();
    }

    void fireDistancesAttributeChanged(const ::v0::commonapi::CanReceiver::SonarArrayStruct &_value);
    
    void fireSpeedAttributeChanged(const uint32_t &_value);
    
    void fireRpmAttributeChanged(const uint32_t &_value);
    
    void deactivateManagedInstances() {}
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v0::commonapi::CanReceiverStub,
        CommonAPI::Version
    > getCanReceiverInterfaceVersionStubDispatcher;

    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v0::commonapi::CanReceiverStub,
        ::v0::commonapi::CanReceiver::SonarArrayStruct,
        ::v0::commonapi::CanReceiver_::SonarArrayStructDeployment_t
    > getDistancesAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v0::commonapi::CanReceiverStub,
        uint32_t,
        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
    > getSpeedAttributeStubDispatcher;
    
    CommonAPI::SomeIP::GetAttributeStubDispatcher<
        ::v0::commonapi::CanReceiverStub,
        uint32_t,
        CommonAPI::SomeIP::IntegerDeployment<uint32_t>
    > getRpmAttributeStubDispatcher;
    
    CanReceiverSomeIPStubAdapterInternal(
        const CommonAPI::SomeIP::Address &_address,
        const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
        const std::shared_ptr<CommonAPI::StubBase> &_stub):
        CommonAPI::SomeIP::StubAdapter(_address, _connection),
        CanReceiverSomeIPStubAdapterHelper(
            _address,
            _connection,
            std::dynamic_pointer_cast< CanReceiverStub>(_stub)),
        getCanReceiverInterfaceVersionStubDispatcher(&CanReceiverStub::lockInterfaceVersionAttribute, &CanReceiverStub::getInterfaceVersion, false, true),
        getDistancesAttributeStubDispatcher(
            &::v0::commonapi::CanReceiverStub::lockDistancesAttribute,
            &::v0::commonapi::CanReceiverStub::getDistancesAttribute,
            false,
            _stub->hasElement(0))
        ,
        getSpeedAttributeStubDispatcher(
            &::v0::commonapi::CanReceiverStub::lockSpeedAttribute,
            &::v0::commonapi::CanReceiverStub::getSpeedAttribute,
            false,
            _stub->hasElement(1))
        ,
        getRpmAttributeStubDispatcher(
            &::v0::commonapi::CanReceiverStub::lockRpmAttribute,
            &::v0::commonapi::CanReceiverStub::getRpmAttribute,
            false,
            _stub->hasElement(2))
    {
        CanReceiverSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xc1d) }, &getDistancesAttributeStubDispatcher );
        CanReceiverSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xc81) }, &getSpeedAttributeStubDispatcher );
        CanReceiverSomeIPStubAdapterHelper::addStubDispatcher( { CommonAPI::SomeIP::method_id_t(0xce5) }, &getRpmAttributeStubDispatcher );
        std::shared_ptr<CommonAPI::SomeIP::ClientId> itsClient = std::make_shared<CommonAPI::SomeIP::ClientId>();

        // Provided events/fields
        if (_stub->hasElement(0)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xc1c)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x7918), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireDistancesAttributeChanged(std::dynamic_pointer_cast< ::v0::commonapi::CanReceiverStub>(_stub)->getDistancesAttribute(itsClient));
        }

        if (_stub->hasElement(1)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xc80)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x7d00), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireSpeedAttributeChanged(std::dynamic_pointer_cast< ::v0::commonapi::CanReceiverStub>(_stub)->getSpeedAttribute(itsClient));
        }

        if (_stub->hasElement(2)) {
            std::set<CommonAPI::SomeIP::eventgroup_id_t> itsEventGroups;
            itsEventGroups.insert(CommonAPI::SomeIP::eventgroup_id_t(CommonAPI::SomeIP::eventgroup_id_t(0xce4)));
            CommonAPI::SomeIP::StubAdapter::registerEvent(CommonAPI::SomeIP::event_id_t(0x80e8), itsEventGroups, CommonAPI::SomeIP::event_type_e::ET_FIELD, CommonAPI::SomeIP::reliability_type_e::RT_RELIABLE);
            fireRpmAttributeChanged(std::dynamic_pointer_cast< ::v0::commonapi::CanReceiverStub>(_stub)->getRpmAttribute(itsClient));
        }

    }

    // Register/Unregister event handlers for selective broadcasts
    void registerSelectiveEventHandlers();
    void unregisterSelectiveEventHandlers();

};

template <typename _Stub, typename... _Stubs>
void CanReceiverSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireDistancesAttributeChanged(const ::v0::commonapi::CanReceiver::SonarArrayStruct &_value) {
    CommonAPI::Deployable< ::v0::commonapi::CanReceiver::SonarArrayStruct, ::v0::commonapi::CanReceiver_::SonarArrayStructDeployment_t> deployedValue(_value, static_cast< ::v0::commonapi::CanReceiver_::SonarArrayStructDeployment_t* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                ::v0::commonapi::CanReceiver::SonarArrayStruct,
                ::v0::commonapi::CanReceiver_::SonarArrayStructDeployment_t
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x7918),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void CanReceiverSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireSpeedAttributeChanged(const uint32_t &_value) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deployedValue(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x7d00),
        false,
        deployedValue
    );
}

template <typename _Stub, typename... _Stubs>
void CanReceiverSomeIPStubAdapterInternal<_Stub, _Stubs...>::fireRpmAttributeChanged(const uint32_t &_value) {
    CommonAPI::Deployable< uint32_t, CommonAPI::SomeIP::IntegerDeployment<uint32_t>> deployedValue(_value, static_cast< CommonAPI::SomeIP::IntegerDeployment<uint32_t>* >(nullptr));
    CommonAPI::SomeIP::StubEventHelper<
        CommonAPI::SomeIP::SerializableArguments<
            CommonAPI::Deployable<
                uint32_t,
                CommonAPI::SomeIP::IntegerDeployment<uint32_t>
            >
            >
    >::sendEvent(
        *this,
        CommonAPI::SomeIP::event_id_t(0x80e8),
        false,
        deployedValue
    );
}


template <typename _Stub, typename... _Stubs>
void CanReceiverSomeIPStubAdapterInternal<_Stub, _Stubs...>::registerSelectiveEventHandlers() {

}

template <typename _Stub, typename... _Stubs>
void CanReceiverSomeIPStubAdapterInternal<_Stub, _Stubs...>::unregisterSelectiveEventHandlers() {

}

template <typename _Stub = ::v0::commonapi::CanReceiverStub, typename... _Stubs>
class CanReceiverSomeIPStubAdapter
    : public CanReceiverSomeIPStubAdapterInternal<_Stub, _Stubs...> {
public:
    CanReceiverSomeIPStubAdapter(const CommonAPI::SomeIP::Address &_address,
                                            const std::shared_ptr<CommonAPI::SomeIP::ProxyConnection> &_connection,
                                            const std::shared_ptr<CommonAPI::StubBase> &_stub)
        : CommonAPI::SomeIP::StubAdapter(_address, _connection),
          CanReceiverSomeIPStubAdapterInternal<_Stub, _Stubs...>(_address, _connection, _stub) {
    }
};

} // namespace commonapi
} // namespace v0

#endif // V0_COMMONAPI_Can_Receiver_SOMEIP_STUB_ADAPTER_HPP_
