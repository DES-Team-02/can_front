/*
* This file was generated by the CommonAPI Generators.
* Used org.genivi.commonapi.core 3.2.14.v202310241605.
* Used org.franca.core 0.13.1.201807231814.
*
* This Source Code Form is subject to the terms of the Mozilla Public License, v. 2.0.
* If a copy of the MPL was not distributed with this file, You can obtain one at
* http://mozilla.org/MPL/2.0/.
*/
#ifndef V0_COMMONAPI_Park_Distance_Control_Sensor_PROXY_HPP_
#define V0_COMMONAPI_Park_Distance_Control_Sensor_PROXY_HPP_

#include <v0/commonapi/ParkDistanceControlSensorProxyBase.hpp>


#if !defined (COMMONAPI_INTERNAL_COMPILATION)
#define COMMONAPI_INTERNAL_COMPILATION
#define HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

#include <CommonAPI/AttributeExtension.hpp>
#include <CommonAPI/Factory.hpp>

#if defined (HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE)
#undef COMMONAPI_INTERNAL_COMPILATION
#undef HAS_DEFINED_COMMONAPI_INTERNAL_COMPILATION_HERE
#endif

namespace v0 {
namespace commonapi {

template <typename ... _AttributeExtensions>
class ParkDistanceControlSensorProxy
    : virtual public ParkDistanceControlSensor,
      virtual public ParkDistanceControlSensorProxyBase,
      virtual public _AttributeExtensions... {
public:
    ParkDistanceControlSensorProxy(std::shared_ptr<CommonAPI::Proxy> delegate);
    ~ParkDistanceControlSensorProxy();

    typedef ::v0::commonapi::ParkDistanceControlSensor InterfaceType;


    /**
     * Returns the CommonAPI address of the remote partner this proxy communicates with.
     */
    virtual const CommonAPI::Address &getAddress() const;

    /**
     * Returns true if the remote partner for this proxy is currently known to be available.
     */
    virtual bool isAvailable() const;

    /**
     * Returns true if the remote partner for this proxy is available.
     */
    virtual bool isAvailableBlocking() const;

    /**
     * Returns the wrapper class that is used to (de-)register for notifications about
     * the availability of the remote partner of this proxy.
     */
    virtual CommonAPI::ProxyStatusEvent& getProxyStatusEvent();

    /**
     * Returns the wrapper class that is used to access version information of the remote
     * partner of this proxy.
     */
    virtual CommonAPI::InterfaceVersionAttribute& getInterfaceVersionAttribute();

    virtual std::future<void> getCompletionFuture();

    /**
     * Returns the wrapper class that provides access to the attribute distances.
     */
    virtual DistancesAttribute& getDistancesAttribute() {
        return delegate_->getDistancesAttribute();
    }



 private:
    std::shared_ptr< ParkDistanceControlSensorProxyBase> delegate_;
};

typedef ParkDistanceControlSensorProxy<> ParkDistanceControlSensorProxyDefault;

namespace ParkDistanceControlSensorExtensions {
    template <template <typename > class _ExtensionType>
    class DistancesAttributeExtension {
     public:
        typedef _ExtensionType< ParkDistanceControlSensorProxyBase::DistancesAttribute> extension_type;
    
        static_assert(std::is_base_of<typename CommonAPI::AttributeExtension< ParkDistanceControlSensorProxyBase::DistancesAttribute>, extension_type>::value,
                      "Not CommonAPI Attribute Extension!");
    
        DistancesAttributeExtension(ParkDistanceControlSensorProxyBase& proxy): attributeExtension_(proxy.getDistancesAttribute()) {
        }
    
        inline extension_type& getDistancesAttributeExtension() {
            return attributeExtension_;
        }
    
     private:
        extension_type attributeExtension_;
    };

} // namespace ParkDistanceControlSensorExtensions

//
// ParkDistanceControlSensorProxy Implementation
//
template <typename ... _AttributeExtensions>
ParkDistanceControlSensorProxy<_AttributeExtensions...>::ParkDistanceControlSensorProxy(std::shared_ptr<CommonAPI::Proxy> delegate):
        _AttributeExtensions(*(std::dynamic_pointer_cast< ParkDistanceControlSensorProxyBase>(delegate)))...,
        delegate_(std::dynamic_pointer_cast< ParkDistanceControlSensorProxyBase>(delegate)) {
}

template <typename ... _AttributeExtensions>
ParkDistanceControlSensorProxy<_AttributeExtensions...>::~ParkDistanceControlSensorProxy() {
}


template <typename ... _AttributeExtensions>
const CommonAPI::Address &ParkDistanceControlSensorProxy<_AttributeExtensions...>::getAddress() const {
    return delegate_->getAddress();
}

template <typename ... _AttributeExtensions>
bool ParkDistanceControlSensorProxy<_AttributeExtensions...>::isAvailable() const {
    return delegate_->isAvailable();
}

template <typename ... _AttributeExtensions>
bool ParkDistanceControlSensorProxy<_AttributeExtensions...>::isAvailableBlocking() const {
    return delegate_->isAvailableBlocking();
}

template <typename ... _AttributeExtensions>
CommonAPI::ProxyStatusEvent& ParkDistanceControlSensorProxy<_AttributeExtensions...>::getProxyStatusEvent() {
    return delegate_->getProxyStatusEvent();
}

template <typename ... _AttributeExtensions>
CommonAPI::InterfaceVersionAttribute& ParkDistanceControlSensorProxy<_AttributeExtensions...>::getInterfaceVersionAttribute() {
    return delegate_->getInterfaceVersionAttribute();
}


template <typename ... _AttributeExtensions>
std::future<void> ParkDistanceControlSensorProxy<_AttributeExtensions...>::getCompletionFuture() {
    return delegate_->getCompletionFuture();
}

} // namespace commonapi
} // namespace v0

namespace CommonAPI {
template<template<typename > class _AttributeExtension>
struct DefaultAttributeProxyHelper< ::v0::commonapi::ParkDistanceControlSensorProxy,
    _AttributeExtension> {
    typedef typename ::v0::commonapi::ParkDistanceControlSensorProxy<
            ::v0::commonapi::ParkDistanceControlSensorExtensions::DistancesAttributeExtension<_AttributeExtension>
    > class_t;
};
}


// Compatibility
namespace v0_1 = v0;

#endif // V0_COMMONAPI_Park_Distance_Control_Sensor_PROXY_HPP_
